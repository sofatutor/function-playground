---
description: GitHub MCP – create and link sub-issues to a parent using REST Sub-issues API (via gh CLI), and verify links
---
## GitHub Sub-issues Workflow (generic, adapt owner/repo)

Use the GitHub MCP tools or `gh` CLI to create sub-issues linked to a parent issue.

### Conventions
- Parent issue describes the feature/bug at a high level.
- Sub-issues capture actionable, independently shippable tasks (tests, UI, services, docs).
- Reference parent issue in each sub-issue body and link back.

### Steps (CLI)
1) Create sub-issue:
```bash
gh issue create \
  --repo <owner>/<repo> \
  --title "<scope>: <concise task>" \
  --body "Parent: #<PARENT_NUMBER>\n\nSummary: ...\nAcceptance Criteria: ..." \
  --label "sub-issue"
```
2) Link in parent (as checklist item):
```bash
gh issue comment <PARENT_NUMBER> \
  --repo <owner>/<repo> \
  --body "- [ ] #<SUB_NUMBER> <scope>: <task>"
```
3) Verify links and state with MCP GitHub tools (list issues, comments, and states) before closing.

### Good sub-issues for this repo
- Unit tests for geometry utils or services
- Component behavior changes with RTL tests
- E2E flow enhancements (Playwright)
- i18n updates (locales + usage)
- Accessibility improvements
- Documentation updates under `docs/`
---
alwaysApply: false
description: GitHub MCP – create and link sub-issues to a parent using REST Sub-issues API (with gh CLI), and verify links
---

## GitHub MCP: Sub-issues (Link child issues to a parent)

Use GitHub's Sub-issues REST API to link child issues to a parent issue. MCP currently lacks dedicated endpoints for sub-issues, so prefer the REST API via `gh api`.

References: [GitHub REST – Sub-issues](https://docs.github.com/en/rest/issues/sub-issues?apiVersion=2022-11-28)

### Add sub-issues
- The API requires the database-level `sub_issue_id` (an integer), not the issue number.
- Headers required: `Accept: application/vnd.github+json`, `X-GitHub-Api-Version: 2022-11-28`.

```bash
# Link a single child to parent
PARENT=75
CHILD=78
SUB_ID=$(gh api repos/sofatutor/llm-proxy/issues/$CHILD --jq .id)
gh api -X POST repos/sofatutor/llm-proxy/issues/$PARENT/sub_issues \
  -H "Accept: application/vnd.github+json" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  -F sub_issue_id=$SUB_ID
```

```bash
# Link multiple children at once
PARENT=75
for n in 78 79 80 81 82 83 84; do \
  sub_id=$(gh api repos/sofatutor/llm-proxy/issues/$n --jq .id); \
  gh api -X POST repos/sofatutor/llm-proxy/issues/$PARENT/sub_issues \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    -F sub_issue_id=$sub_id; \
done
```

### Verify sub-issues
```bash
PARENT=75
gh api repos/sofatutor/llm-proxy/issues/$PARENT/sub_issues \
  -H "Accept: application/vnd.github+json" \
  -H "X-GitHub-Api-Version: 2022-11-28"
```

### Notes
- If sub-issues also appear as a markdown task list in the parent body (e.g., `- [ ] #123`), keep both in sync. The REST sub-issues linkage is the source of truth for GitHub’s sub-issue UI and progress.
- Use MCP for creating/updating issues; use `gh api` specifically for linking/unlinking sub-issues until MCP adds first-class support.

